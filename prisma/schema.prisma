generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id                       String                    @id @default(uuid()) @map("id") @db.Uuid
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  name                     String
  autAnswers               AUTAnswer[]
  chatMessages             ChatMessage[]
  chatSessions             ChatSession[]
  datSubmissions           DATSubmission[]
  demographicsAnswers      DemographicsAnswer[]
  monologueRecordings      MonologueRecording[]
  peerTrainingParticipants PeerTrainingParticipant[] @relation("Participants")
  portfolioItems           PortfolioItem[]
  ratAnswers               RATAnswer[]
  preferences              UserPreferences?
  voiceAgentRecordings    VoiceAgentRecording[]

  @@map("user_profiles")
}

model UserPreferences {
  id                String      @id @default(uuid()) @db.Uuid
  userId            String      @unique @map("user_id") @db.Uuid
  ttsEnabled        Boolean     @default(true) @map("tts_enabled")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  preferredLanguage String      @default("en") @map("preferred_language")
  memory            String?     @db.Text
  voiceId           String?     @map("voice_id") // ElevenLabs voice clone ID
  user              UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PortfolioItem {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  description String
  link        String?
  filePath    String?     @map("file_path")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model MonologueRecording {
  id                       String      @id @default(uuid()) @db.Uuid
  userId                   String      @map("user_id") @db.Uuid
  questionText             String      @map("question_text")
  audioPath                String?     @map("audio_path")
  durationSeconds          Int?        @map("duration_seconds")
  createdAt                DateTime    @default(now()) @map("created_at")
  questionId               Int?        @map("question_id")
  supplementaryFilePath    String?     @map("supplementary_file_path")
  supplementaryDescription String?     @map("supplementary_description")
  supplementaryLink        String?     @map("supplementary_link")
  textResponse             String?     @map("text_response")
  isCustomQuestion         Boolean     @default(false) @map("is_custom_question")
  user                     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("monologue_recordings")
}

model PeerTrainingRecording {
  id                String                    @id @default(uuid()) @db.Uuid
  videoPath         String                    @map("video_path")
  specificQuestions String[]                  @map("specific_questions")
  durationSeconds   Int?                      @map("duration_seconds")
  createdAt         DateTime                  @default(now()) @map("created_at")
  participants      PeerTrainingParticipant[] @relation("TrainingRecord")

  @@map("peer_training_recordings")
}

model PeerTrainingParticipant {
  trainingId String                @map("training_id") @db.Uuid
  userId     String                @map("user_id") @db.Uuid
  training   PeerTrainingRecording @relation("TrainingRecord", fields: [trainingId], references: [id], onDelete: Cascade)
  user       UserProfile           @relation("Participants", fields: [userId], references: [id], onDelete: Cascade)

  @@id([trainingId, userId])
  @@map("peer_training_participants")
}

model AUTAnswer {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  questionId Int         @map("question_id")
  uses       String[]
  createdAt  DateTime    @default(now()) @map("created_at")
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("aut_answers")
}

model RATAnswer {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  questionId Int         @map("question_id")
  answer     String
  isCorrect  Boolean?
  createdAt  DateTime    @default(now()) @map("created_at")
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rat_answers")
}

model DATSubmission {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  words     String[]
  score     Float?
  createdAt DateTime    @default(now()) @map("created_at")
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dat_submissions")
}

model DemographicsAnswer {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  answer      String
  createdAt   DateTime    @default(now()) @map("created_at")
  questionKey String      @map("question_key")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionKey])
  @@map("demographics_answers")
}

model ChatSession {
  id           String        @id @default(cuid()) @map("id")
  userId       String        @map("user_id") @db.Uuid
  title        String        @default("Untitled Chat")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  chatMessages ChatMessage[]
  user         UserProfile   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id          String       @id @default(cuid())
  role        String
  sessionId   String       @map("session_id")
  createdAt   DateTime     @default(now())
  userId      String?      @map("user_id") @db.Uuid
  content     Json
  metadata    Json?
  type        String       @default("text")
  updatedAt   DateTime     @updatedAt
  chatSession ChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        UserProfile? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([sessionId])
  @@map("chat_messages")
}

model VoiceAgentRecording {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  audioPath   String
  durationSec Float?
  createdAt   DateTime @default(now())
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_agent_recordings")
}
