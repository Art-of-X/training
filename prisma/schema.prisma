// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Profile (linked to Supabase Auth)
model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid @map("id") // Links to auth.users.id
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  portfolioItems           PortfolioItem[]
  monologueRecordings      MonologueRecording[]
  peerTrainingParticipants PeerTrainingParticipant[] @relation("Participants")
  autAnswers               AUTAnswer[]
  ratAnswers               RATAnswer[]
  datSubmissions           DATSubmission[]
  demographicsAnswers      DemographicsAnswer[]

  @@map("user_profiles") // Map to the public.user_profiles table
}

// Portfolio Module
model PortfolioItem {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  description String
  link        String?
  filePath    String?  @map("file_path")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

// Monologue Module
// Questions are now stored in public/data/monologue-questions.json
model MonologueRecording {
  id                     String   @id @default(uuid()) @db.Uuid
  userId                 String   @map("user_id") @db.Uuid
  questionText           String   @map("question_text")
  audioPath              String   @map("audio_path")
  durationSeconds        Int?     @map("duration_seconds")
  supplementaryFilePath  String?  @map("supplementary_file_path")
  supplementaryLink      String?  @map("supplementary_link")
  supplementaryDescription String? @map("supplementary_description")
  createdAt              DateTime @default(now()) @map("created_at")
  questionId             Int      @map("question_id") // References JSON file questions

  // Relations
  user            UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("monologue_recordings")
}

// Peer Training Module
model PeerTrainingRecording {
  id                String   @id @default(uuid()) @db.Uuid
  videoPath         String   @map("video_path") // Path to recorded video in Supabase Storage
  specificQuestions String[] @map("specific_questions") // TEXT[]
  durationSeconds   Int?     @map("duration_seconds")

  participants PeerTrainingParticipant[] @relation("TrainingRecord")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("peer_training_recordings")
}

// Join table for Peer Training Participants (Many-to-Many)
model PeerTrainingParticipant {
  trainingId String @map("training_id") @db.Uuid
  userId     String @map("user_id") @db.Uuid

  training PeerTrainingRecording @relation("TrainingRecord", fields: [trainingId], references: [id], onDelete: Cascade)
  user     UserProfile           @relation("Participants", fields: [userId], references: [id], onDelete: Cascade)

  @@id([trainingId, userId]) // Composite primary key
  @@map("peer_training_participants")
}

// Creativity Benchmarking Module
// Questions are now stored in public/data/aut-questions.json and public/data/rat-questions.json

// Alternate Uses Test (AUT)
model AUTAnswer {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  questionId Int      @map("question_id") // References JSON file questions
  uses       String[]
  createdAt  DateTime @default(now()) @map("created_at")

  user     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("aut_answers")
}

// Remote Associates Test (RAT)
model RATAnswer {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  questionId Int      @map("question_id") // References JSON file questions
  answer     String
  isCorrect  Boolean? // Some RATs have correct answers
  createdAt  DateTime @default(now()) @map("created_at")

  user     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rat_answers")
}

// Divergent Association Task (DAT)
// No questions, just user submissions.
model DATSubmission {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  words     String[]
  score     Float?   // Semantic distance score
  createdAt DateTime @default(now()) @map("created_at")

  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dat_submissions")
}

// Demographics Module - Questions stored in JSON, only answers in DB
model DemographicsAnswer {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  questionKey String   @map("question_key") // References the "key" field in JSON
  answer      String   // Stored as string regardless of original type
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionKey]) // One answer per user per question
  @@map("demographics_answers")
} 