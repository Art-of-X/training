generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id                       String                    @id @default(uuid()) @map("id") @db.Uuid
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  name                     String
  favoriteSparkIds         String[]                  @default([]) @map("favorite_spark_ids") @db.Uuid
  autAnswers               AUTAnswer[]
  chatMessages             ChatMessage[]
  chatSessions             ChatSession[]
  datSubmissions           DATSubmission[]
  demographicsAnswers      DemographicsAnswer[]
  monologueRecordings      MonologueRecording[]
  patterns                 Pattern[]                 @relation("UserPatterns")
  peerTrainingParticipants PeerTrainingParticipant[] @relation("Participants")
  portfolioItems           PortfolioItem[]
  projectRuns              ProjectRun[]              @relation("UserProjectRuns")
  projects                 Project[]
  ratAnswers               RATAnswer[]
  sparks                   Spark[]                   @relation("UserSparks")
  preferences              UserPreferences?
  voiceAgentRecordings     VoiceAgentRecording[]

  @@map("user_profiles")
}

model UserPreferences {
  id                String      @id @default(uuid()) @db.Uuid
  userId            String      @unique @map("user_id") @db.Uuid
  ttsEnabled        Boolean     @default(true) @map("tts_enabled")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  preferredLanguage String      @default("en") @map("preferred_language")
  voiceId           String?     @map("voice_id")
  memory            String?
  user              UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PortfolioItem {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  description String
  link        String?
  filePath    String?     @map("file_path")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model MonologueRecording {
  id                       String      @id @default(uuid()) @db.Uuid
  userId                   String      @map("user_id") @db.Uuid
  questionText             String      @map("question_text")
  audioPath                String?     @map("audio_path")
  durationSeconds          Int?        @map("duration_seconds")
  createdAt                DateTime    @default(now()) @map("created_at")
  questionId               Int?        @map("question_id")
  supplementaryFilePath    String?     @map("supplementary_file_path")
  supplementaryDescription String?     @map("supplementary_description")
  supplementaryLink        String?     @map("supplementary_link")
  textResponse             String?     @map("text_response")
  isCustomQuestion         Boolean     @default(false) @map("is_custom_question")
  user                     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("monologue_recordings")
}

model PeerTrainingRecording {
  id                String                    @id @default(uuid()) @db.Uuid
  videoPath         String                    @map("video_path")
  specificQuestions String[]                  @map("specific_questions")
  durationSeconds   Int?                      @map("duration_seconds")
  createdAt         DateTime                  @default(now()) @map("created_at")
  participants      PeerTrainingParticipant[] @relation("TrainingRecord")

  @@map("peer_training_recordings")
}

model PeerTrainingParticipant {
  trainingId String                @map("training_id") @db.Uuid
  userId     String                @map("user_id") @db.Uuid
  training   PeerTrainingRecording @relation("TrainingRecord", fields: [trainingId], references: [id], onDelete: Cascade)
  user       UserProfile           @relation("Participants", fields: [userId], references: [id], onDelete: Cascade)

  @@id([trainingId, userId])
  @@map("peer_training_participants")
}

model AUTAnswer {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  questionId Int         @map("question_id")
  uses       String[]
  createdAt  DateTime    @default(now()) @map("created_at")
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("aut_answers")
}

model RATAnswer {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  questionId Int         @map("question_id")
  answer     String
  isCorrect  Boolean?
  createdAt  DateTime    @default(now()) @map("created_at")
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rat_answers")
}

model DATSubmission {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  words     String[]
  score     Float?
  createdAt DateTime    @default(now()) @map("created_at")
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dat_submissions")
}

model DemographicsAnswer {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  answer      String
  createdAt   DateTime    @default(now()) @map("created_at")
  questionKey String      @map("question_key")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionKey])
  @@map("demographics_answers")
}

model ChatSession {
  id           String        @id @default(cuid()) @map("id")
  userId       String        @map("user_id") @db.Uuid
  title        String        @default("Untitled Chat")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  chatMessages ChatMessage[]
  user         UserProfile   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id          String       @id @default(cuid())
  role        String
  sessionId   String       @map("session_id")
  createdAt   DateTime     @default(now())
  userId      String?      @map("user_id") @db.Uuid
  content     Json
  metadata    Json?
  type        String       @default("text")
  updatedAt   DateTime     @updatedAt
  chatSession ChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        UserProfile? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([sessionId])
  @@map("chat_messages")
}

model VoiceAgentRecording {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  audioPath   String
  durationSec Float?
  createdAt   DateTime    @default(now())
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_agent_recordings")
}

model Pattern {
  id                     Int          @id @default(autoincrement())
  userId                 String?      @map("user_id") @db.Uuid
  messageId              String       @map("message_id")
  method                 String
  competency             String
  spark                  String
  createdAt              DateTime     @default(now()) @map("created_at")
  isPredefined           Boolean      @default(true) @map("is_predefined")
  sparkId                String?      @map("spark_id") @db.Uuid
  isPredefinedMethod     Boolean      @default(false) @map("is_predefined_method")
  isPredefinedCompetency Boolean      @default(false) @map("is_predefined_competency")
  sparkRef               Spark?       @relation("SparkPatterns", fields: [sparkId], references: [id], onDelete: Cascade)
  user                   UserProfile? @relation("UserPatterns", fields: [userId], references: [id], onDelete: Cascade)

  @@index([isPredefinedCompetency], map: "idx_patterns_predefined_competency")
  @@index([isPredefinedMethod], map: "idx_patterns_predefined_method")
  @@index([sparkId], map: "idx_patterns_spark_id")
  @@map("patterns")
}

model Spark {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  description      String
  systemPrompt     String             @map("system_prompt")
  discipline       String
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  userId           String?            @map("user_id") @db.Uuid
  isPublic         Boolean            @default(false) @map("is_public")
  isPremium        Boolean            @default(false) @map("is_premium")
  publicShareId    String?            @unique @map("public_share_id") @db.Uuid
  profitSplitOptIn Boolean            @default(false) @map("profit_split_opt_in")
  profileImageUrl  String?            @map("profile_image_url")
  outputs          Output[]
  patterns         Pattern[]          @relation("SparkPatterns")
  dendrograms      SparkDendrogram?
  user             UserProfile?       @relation("UserSparks", fields: [userId], references: [id], onUpdate: NoAction)
  projects         SparksOnProjects[]

  @@map("sparks")
}

model Project {
  id           String             @id @default(uuid()) @db.Uuid
  userId       String             @map("user_id") @db.Uuid
  name         String
  task         String
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  contextItems ContextItem[]
  outputs      Output[]
  runs         ProjectRun[]       @relation("ProjectRuns")
  user         UserProfile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sparks       SparksOnProjects[]

  @@map("projects")
}

model ContextItem {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  description String?
  link        String?
  filePath    String?  @map("file_path")
  text        String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("context_items")
}

model SparksOnProjects {
  projectId  String   @map("project_id") @db.Uuid
  sparkId    String   @map("spark_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  spark      Spark    @relation(fields: [sparkId], references: [id], onDelete: Cascade)

  @@id([projectId, sparkId])
  @@map("sparks_on_projects")
}

model Output {
  id            String      @id @default(uuid()) @db.Uuid
  projectId     String      @map("project_id") @db.Uuid
  sparkId       String      @map("spark_id") @db.Uuid
  text          String
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  runId         String?     @map("run_id") @db.Uuid
  title         String?
  coverPrompt   String?
  coverImageUrl String?
  coverSvg      String?     @map("cover_svg")
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  run           ProjectRun? @relation("RunOutputs", fields: [runId], references: [id])
  spark         Spark       @relation(fields: [sparkId], references: [id], onDelete: Cascade)

  comments      OutputComment[]

  @@map("outputs")
}

model OutputComment {
  id        String   @id @default(uuid()) @db.Uuid
  outputId  String   @map("output_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      String
  text      String
  createdAt DateTime @default(now()) @map("created_at")

  output    Output   @relation(fields: [outputId], references: [id], onDelete: Cascade)

  @@index([outputId])
  @@map("output_comments")
}

model SparkDendrogram {
  id            String   @id @default(uuid()) @db.Uuid
  sparkId       String   @unique @map("spark_id") @db.Uuid
  dendrogramSvg String   @map("dendrogram_svg")
  dendrogramPng Bytes?   @map("dendrogram_png")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  spark         Spark    @relation(fields: [sparkId], references: [id], onDelete: Cascade)

  @@map("spark_dendrograms")
}

model ProjectRun {
  id         String            @id @default(uuid()) @db.Uuid
  projectId  String            @map("project_id") @db.Uuid
  userId     String            @map("user_id") @db.Uuid
  status     String            @default("running")
  createdAt  DateTime          @default(now()) @map("created_at")
  finishedAt DateTime?         @map("finished_at")
  summary    String?
  outputs    Output[]          @relation("RunOutputs")
  events     ProjectRunEvent[] @relation("RunEvents")
  project    Project           @relation("ProjectRuns", fields: [projectId], references: [id], onDelete: Cascade)
  user       UserProfile       @relation("UserProjectRuns", fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_runs")
}

model ProjectRunEvent {
  id        Int        @id @default(autoincrement())
  runId     String     @map("run_id") @db.Uuid
  type      String
  payload   Json
  createdAt DateTime   @default(now()) @map("created_at")
  run       ProjectRun @relation("RunEvents", fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId, id])
  @@map("project_run_events")
}

model VectorChunk {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artistName  String                 @map("artist_name") @db.VarChar(255)
  content     String
  metadata    Json
  embedding   Unsupported("vector")?
  contentHash String                 @unique @map("content_hash") @db.VarChar(64)
  createdAt   DateTime?              @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at  DateTime?              @default(now()) @db.Timestamp(6)

  @@index([artistName], map: "idx_vector_chunks_artist_name")
  @@index([embedding], map: "idx_vector_chunks_embedding")
  @@map("vector_chunks")
}
