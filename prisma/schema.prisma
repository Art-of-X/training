generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id                       String                    @id @default(uuid()) @map("id") @db.Uuid
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  name                     String
  autAnswers               AUTAnswer[]
  chatMessages             ChatMessage[]
  chatSessions             ChatSession[]
  datSubmissions           DATSubmission[]
  demographicsAnswers      DemographicsAnswer[]
  monologueRecordings      MonologueRecording[]
  patterns                 Pattern[]                 @relation("UserPatterns")
  peerTrainingParticipants PeerTrainingParticipant[] @relation("Participants")
  portfolioItems           PortfolioItem[]
  projects                 Project[]
  ratAnswers               RATAnswer[]
  preferences              UserPreferences?
  voiceAgentRecordings     VoiceAgentRecording[]
  projectRuns              ProjectRun[]           @relation("UserProjectRuns")
  sparks                   Spark[]                 @relation("UserSparks")

  @@map("user_profiles")
}

model UserPreferences {
  id                String      @id @default(uuid()) @db.Uuid
  userId            String      @unique @map("user_id") @db.Uuid
  ttsEnabled        Boolean     @default(true) @map("tts_enabled")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  preferredLanguage String      @default("en") @map("preferred_language")
  memory            String?
  voiceId           String?     @map("voice_id")
  user              UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PortfolioItem {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  description String
  link        String?
  filePath    String?     @map("file_path")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model MonologueRecording {
  id                       String      @id @default(uuid()) @db.Uuid
  userId                   String      @map("user_id") @db.Uuid
  questionText             String      @map("question_text")
  audioPath                String?     @map("audio_path")
  durationSeconds          Int?        @map("duration_seconds")
  createdAt                DateTime    @default(now()) @map("created_at")
  questionId               Int?        @map("question_id")
  supplementaryFilePath    String?     @map("supplementary_file_path")
  supplementaryDescription String?     @map("supplementary_description")
  supplementaryLink        String?     @map("supplementary_link")
  textResponse             String?     @map("text_response")
  isCustomQuestion         Boolean     @default(false) @map("is_custom_question")
  user                     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("monologue_recordings")
}

model PeerTrainingRecording {
  id                String                    @id @default(uuid()) @db.Uuid
  videoPath         String                    @map("video_path")
  specificQuestions String[]                  @map("specific_questions")
  durationSeconds   Int?                      @map("duration_seconds")
  createdAt         DateTime                  @default(now()) @map("created_at")
  participants      PeerTrainingParticipant[] @relation("TrainingRecord")

  @@map("peer_training_recordings")
}

model PeerTrainingParticipant {
  trainingId String                @map("training_id") @db.Uuid
  userId     String                @map("user_id") @db.Uuid
  training   PeerTrainingRecording @relation("TrainingRecord", fields: [trainingId], references: [id], onDelete: Cascade)
  user       UserProfile           @relation("Participants", fields: [userId], references: [id], onDelete: Cascade)

  @@id([trainingId, userId])
  @@map("peer_training_participants")
}

model AUTAnswer {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  questionId Int         @map("question_id")
  uses       String[]
  createdAt  DateTime    @default(now()) @map("created_at")
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("aut_answers")
}

model RATAnswer {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  questionId Int         @map("question_id")
  answer     String
  isCorrect  Boolean?
  createdAt  DateTime    @default(now()) @map("created_at")
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rat_answers")
}

model DATSubmission {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  words     String[]
  score     Float?
  createdAt DateTime    @default(now()) @map("created_at")
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dat_submissions")
}

model DemographicsAnswer {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  answer      String
  createdAt   DateTime    @default(now()) @map("created_at")
  questionKey String      @map("question_key")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionKey])
  @@map("demographics_answers")
}

model ChatSession {
  id           String        @id @default(cuid()) @map("id")
  userId       String        @map("user_id") @db.Uuid
  title        String        @default("Untitled Chat")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  chatMessages ChatMessage[]
  user         UserProfile   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id          String       @id @default(cuid())
  role        String
  sessionId   String       @map("session_id")
  createdAt   DateTime     @default(now())
  userId      String?      @map("user_id") @db.Uuid
  content     Json
  metadata    Json?
  type        String       @default("text")
  updatedAt   DateTime     @updatedAt
  chatSession ChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        UserProfile? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([sessionId])
  @@map("chat_messages")
}

model VoiceAgentRecording {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  audioPath   String
  durationSec Float?
  createdAt   DateTime    @default(now())
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_agent_recordings")
}

model Pattern {
  id                     Int          @id @default(autoincrement())
  userId                 String?      @map("user_id") @db.Uuid
  messageId              String       @map("message_id")
  method                 String
  competency             String
  spark                  String
  createdAt              DateTime     @default(now()) @map("created_at")
  isPredefined           Boolean      @default(true) @map("is_predefined")
  sparkId                String       @map("spark_id") @db.Uuid
  isPredefinedMethod     Boolean      @default(false) @map("is_predefined_method")
  isPredefinedCompetency Boolean      @default(false) @map("is_predefined_competency")
  sparkRef               Spark        @relation("SparkPatterns", fields: [sparkId], references: [id], onDelete: Cascade)
  user                   UserProfile? @relation("UserPatterns", fields: [userId], references: [id], onDelete: Cascade)

  @@index([isPredefinedCompetency], map: "idx_patterns_predefined_competency")
  @@index([isPredefinedMethod], map: "idx_patterns_predefined_method")
  @@map("patterns")
}

model Spark {
  id            String             @id @default(uuid()) @db.Uuid
  name          String
  description   String
  systemPrompt  String             @map("system_prompt")
  discipline    String
  userId        String?            @map("user_id") @db.Uuid
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  outputs       Output[]
  patterns      Pattern[]          @relation("SparkPatterns")
  dendrograms   SparkDendrogram[]
  projects      SparksOnProjects[]
  user          UserProfile?       @relation("UserSparks", fields: [userId], references: [id], onDelete: SetNull)

  @@map("sparks")
}

model Project {
  id           String             @id @default(uuid()) @db.Uuid
  userId       String             @map("user_id") @db.Uuid
  name         String
  task         String
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  contextItems ContextItem[]
  outputs      Output[]
  user         UserProfile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sparks       SparksOnProjects[]
  runs         ProjectRun[]        @relation("ProjectRuns")

  @@map("projects")
}

model ContextItem {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  description String?
  link        String?
  filePath    String?  @map("file_path")
  text        String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("context_items")
}

model SparksOnProjects {
  projectId  String   @map("project_id") @db.Uuid
  sparkId    String   @map("spark_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  spark      Spark    @relation(fields: [sparkId], references: [id], onDelete: Cascade)

  @@id([projectId, sparkId])
  @@map("sparks_on_projects")
}

model Output {
  id             String   @id @default(uuid()) @db.Uuid
  projectId      String   @map("project_id") @db.Uuid
  sparkId        String   @map("spark_id") @db.Uuid
  title          String?  // Title of the idea (optional initially for existing data)
  text           String   // Full description/content of the idea
  coverPrompt    String?  // Prompt for generating visual cover with diffusion model
  coverImageUrl  String?  // URL of the generated cover image
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  runId          String?  @map("run_id") @db.Uuid
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  spark          Spark    @relation(fields: [sparkId], references: [id], onDelete: Cascade)
  run            ProjectRun? @relation("RunOutputs", fields: [runId], references: [id], onDelete: SetNull)

  @@map("outputs")
}

model SparkDendrogram {
  id            String   @id @default(uuid()) @db.Uuid
  sparkId       String   @unique @map("spark_id") @db.Uuid
  dendrogramSvg String   @map("dendrogram_svg")
  dendrogramPng Bytes?   @map("dendrogram_png")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  spark         Spark    @relation(fields: [sparkId], references: [id], onDelete: Cascade)

  @@map("spark_dendrograms")
}

model ProjectRun {
  id         String      @id @default(uuid()) @db.Uuid
  projectId  String      @map("project_id") @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  status     String      @default("running")
  createdAt  DateTime    @default(now()) @map("created_at")
  finishedAt DateTime?   @map("finished_at")
  summary    String?
  project    Project     @relation("ProjectRuns", fields: [projectId], references: [id], onDelete: Cascade)
  user       UserProfile @relation("UserProjectRuns", fields: [userId], references: [id], onDelete: Cascade)
  outputs    Output[]    @relation("RunOutputs")
  events     ProjectRunEvent[] @relation("RunEvents")

  @@map("project_runs")
}

model ProjectRunEvent {
  id        Int         @id @default(autoincrement())
  runId     String      @map("run_id") @db.Uuid
  type      String
  payload   Json
  createdAt DateTime    @default(now()) @map("created_at")
  run       ProjectRun  @relation("RunEvents", fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId, id])
  @@map("project_run_events")
}

// Vector chunks for RAG system (stored in Supabase DB with pgvector)
model VectorChunk {
  id          String                      @id @default(uuid()) @db.Uuid
  artistName  String                      @map("artist_name")
  content     String
  metadata    Json                        @default("{}")
  embedding   Unsupported("vector(1536)")
  contentHash String                      @unique @map("content_hash")
  createdAt   DateTime                    @default(now()) @map("created_at")

  @@map("vector_chunks")
  @@index([artistName])
  @@index([contentHash])
}

// Optional: RAG query history for analytics/debugging
model RAGQuery {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String?     @map("user_id") @db.Uuid
  artistName  String      @map("artist_name")
  query       String
  response    String
  confidence  Float
  sources     Json        @default("[]")
  createdAt   DateTime    @default(now()) @map("created_at")

  @@map("rag_queries")
  @@index([artistName])
  @@index([userId])
  @@index([createdAt])
}
